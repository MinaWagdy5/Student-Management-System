# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'board4.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from learning_management.student import Student
from learning_management.professor import professor
from learning_management.stud_course import Stud_course
from learning_management.prof_course import Prof_course
from learning_management.Course import Course
import pandas as pd
import csv
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView


class Ui_MainWindow(object):
    def add_student(self):
        student_FName = self.Student_FName_LineEdit.text()
        student_LName = self.Student_LName_LineEdit.text()
        student_Mobile = self.Student_Mobile_LineEdit.text()
        student_Email = self.Student_Email_LineEdit.text()
        student_Grade = self.Student_Grade_LineEdit.text()
        student_Age = self.Student_Age_SpinBox.text()
        stud = Student(student_FName, student_LName, student_Age,
                       student_Mobile, student_Email, student_Grade)
        print(stud)
        attribute_values = []
        for attr_name, attr_value in stud.__dict__.items():
            attribute_values.append(attr_value)
        stud.append_value('student_FName'+' ' +
                          'student_LName', attribute_values)
    def add_class(self):
             class_name = self.Student_Search_Bar2_2.text()
             class_code= self.Student_Search_Bar2_3.text()
             class_hall = self.Student_Search_Bar2_5.text()
             class_time = self.Student_Search_Bar2_6.text()
             if class_name and class_code and class_hall and class_time:
                attribute_values = []
                my_class = Course(class_name, class_hall ,class_code , class_time)

                for attr_name, attr_value in my_class.__dict__.items():
                        attribute_values.append(attr_value)
                        print(attr_value)
                        print(attr_value)
                print(attribute_values)
                my_class.append_value('student_FName'+' ' +
                                        'student_LName', attribute_values)

    def add_prof(self):
        student_FName = self.Prof_FName_LineEdit.text()
        student_LName = self.Prof_LName_LineEdit.text()
        student_Mobile = self.Prof_Mobile_LineEdit.text()
        student_Email = self.Prof_Email_LineEdit.text()
        student_Grade = self.Prof_Title_LineEdit.text()
        student_Age = self.Prof_Age_SpinBox.text()
        prof = professor(student_FName, student_LName, student_Age,
                         student_Mobile, student_Email, student_Grade)
        print(prof)
        attribute_values = []
        for attr_name, attr_value in prof.__dict__.items():
            attribute_values.append(attr_value)
        prof.append_value('student_FName'+' ' +
                          'student_LName', attribute_values)

    def goToPage2(self):
        self.mainBodyTabs.setCurrentIndex(3)

    def goToPage_prof(self):
        self.mainBodyTabs.setCurrentIndex(1)

    def goToPage_class(self):
        self.mainBodyTabs.setCurrentIndex(2)

    def student_search(self):
        search_name = self.Student_SearchBar.text()
        print(search_name)
        stud = Student.search(search_name, search_name)
        # write into labels
        self.label_11.setText(stud['first_name'])
        self.label_12.setText(stud['last_name'])
        self.label_13.setText(stud['mobile_number'])
        self.label_14.setText(stud['email'])
        self.label_15.setText(stud['grade'])
        self.label_16.setText(stud['age'])

    def prof_search(self):
        search_name = self.Prof_SearchBar.text()
        print(search_name)
        prof = professor.search(search_name, search_name)
        # write into labels
        self.label_17.setText(prof['first_name'])
        self.label_25.setText(prof['last_name'])
        self.label_26.setText(prof['mobile_number'])
        self.label_19.setText(prof['email'])
        self.label_24.setText(prof['title'])
        self.label_18.setText(prof['age'])
    def goToPage_dash(self):
        self.mainBodyTabs.setCurrentIndex(0)
    def add_stud_class(self):
        student_name = self.Student_Search_Bar2.text()
        class_name = self.Class_Search_Bar3.text()
        
        # Check if the student exists
        student_df = pd.read_csv("students.csv")
        if student_name not in student_df['full_name'].values:
            print("Student does not exist")
            return
        
        # Check if the class exists
        class_df = pd.read_csv("class.csv")
        if class_name not in class_df['course_name'].values:
            print("Class does not exist")
            return

        student_course = Stud_course(class_name, student_name)
        attribute_values = []
        for attr_name, attr_value in student_course.__dict__.items():
            attribute_values.append(attr_value)
        student_course.append_value(class_name, attribute_values)

    def add_prof_class(self):
        prof_name = self.Prof_Search_Bar2.text()
        class_name = self.Class_Search_Bar2.text()
        
        # Check if the professor exists
        professor_df = pd.read_csv("professors.csv")
        if prof_name not in professor_df['full_name'].values:
            print("Professor does not exist")
            return
        
        # Check if the class exists
        class_df = pd.read_csv("class.csv")
        if class_name not in class_df['course_name'].values:
            print("Class does not exist")
            return

        professor_course = Prof_course(class_name, prof_name)
        attribute_values = []
        for attr_name, attr_value in professor_course.__dict__.items():
            attribute_values.append(attr_value)
        professor_course.append_value(class_name, attribute_values)
    def search_class(self):
        # Read the CSV files for professors and classes
        student_df = pd.read_csv("student_courses.csv")
        professor_df = pd.read_csv("professor_courses.csv")
        class_df = pd.read_csv("class.csv")
        filtered_df = class_df[class_df['course_name'] == self.Class_SearchBar.text()]


        # Display the results in separate tables
        self.display_results(student_df, self.class_search_result)
        self.display_results(professor_df, self.professor_TW)
        self.display_results(filtered_df, self.class_info_TW)

    def display_results(self, data, table_widget):
        # Clear previous contents of the table
        table_widget.clearContents()
        table_widget.setRowCount(0)

        # Set the table headers
        headers = list(data.columns)
        table_widget.setColumnCount(len(headers))
        table_widget.setHorizontalHeaderLabels(headers)

        # Populate the table with data
        for row_index, row_data in data.iterrows():
            # Insert a new row
            row_index = table_widget.rowCount()
            table_widget.insertRow(row_index)
            
            # Populate data into each cell of the row
            for col_index, value in enumerate(row_data):
                item = QTableWidgetItem(str(value))
                table_widget.setItem(row_index, col_index, item)
        # Set the stretch last section property of the horizontal header
        horizontal_header = self.class_search_result.horizontalHeader()
        horizontal_header2 = self.professor_TW.horizontalHeader()
        horizontal_header3 = self.class_info_TW.horizontalHeader()
        
        horizontal_header.setSectionResizeMode(QHeaderView.Stretch)
        horizontal_header2.setSectionResizeMode(QHeaderView.Stretch)
        horizontal_header3.setSectionResizeMode(QHeaderView.Stretch)
    def handle_item_click(self):
         selected_item = self.class_search_result.currentItem().text()
         self.Student_SearchBar.setText(selected_item)
         self.student_search()
         self.goToPage2()
    def handle_prof_item_click(self):
         selected_item = self.professor_TW.currentItem().text()
         self.Prof_SearchBar.setText(selected_item)
         self.prof_search()
         self.goToPage_prof()
    def import_csv(self, parent, target_filename):
        filename, _ = QFileDialog.getOpenFileName(parent, "Open CSV File", "", "CSV Files (*.csv)")  # Open file dialog
        
        # Initialize my_label with a default value
        my_label = None
        
        if target_filename == "students.csv":
            my_label = self.label_5
        elif target_filename == "professors.csv":
            my_label = self.label
        
        if filename:
            try:
                with open(filename, newline='') as csvfile:
                    reader = csv.reader(csvfile)
                    headers = next(reader)  # Get the headers of the CSV file
                    data = list(reader)
                    
                # Check if headers of target file exist and are equal
                if not self.check_headers(target_filename, headers):
                    if my_label:
                        my_label.setText("Error: Headers of the files are not equal.")
                    return

                with open(target_filename, 'a', newline='') as datafile:
                    writer = csv.writer(datafile)
                    writer.writerows(data)
                    
                if my_label:
                    my_label.setText("CSV file appended successfully.")
                    
            except Exception as e:
                if my_label:
                    my_label.setText("Error: " + str(e))

    def check_headers(self, target_filename, headers):
        try:
            with open(target_filename, 'r', newline='') as target_file:
                reader = csv.reader(target_file)
                target_headers = next(reader)
                return headers == target_headers
        except Exception as e:
            return False
    def export_csv(self, parent, target_filename):
        try:
            options = QFileDialog.Options()
            options |= QFileDialog.DontUseNativeDialog
            chosen_filename, _ = QFileDialog.getSaveFileName(parent, "Save CSV File", "", "CSV Files (*.csv)", options=options)
            
            if chosen_filename:
                with open(chosen_filename, 'w', newline='') as new_csv_file:
                    # Open the target file
                    with open(target_filename, 'r', newline='') as target_file:
                        reader = csv.reader(target_file)
                        writer = csv.writer(new_csv_file)
                        for row in reader:
                            writer.writerow(row)
                return chosen_filename
            
            return None
            
        except Exception as e:
            print("Error:", e)
            return None
